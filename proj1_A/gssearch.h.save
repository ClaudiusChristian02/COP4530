#ifndef GSSEARCH_H
#define GSSEARCH_H

namespace seq{

	template <class I, typename T, class P>
	I g_lower_bound(I low, I hih, const T& val, P& cmp)
		// pre:    I is a random access iterator (operator [] and "pointer" arithmetic)
		//         I has ValueType T
		//         low + n = hih for some n >= 0
		//         low[0] ... low[n-1] are in non-decreasing order using cmp
		// post:   no state is changed
		// return: itr = lower bound location in range, that is:
		//         itr = low + i, where low[i-1] < val <= low[i] or
		//         itr = hih if no such i exists
	{
		I mid;
		while (low != hih)
		{
			mid = calc_middle(low, hih);       // calculates the middle iterator of the range
			if (cmp(*mid, val))                // *mid < val
				low = ++mid;                        // *mid <= val
			else                                // val <= *mid
				hih = mid;                          // val <= *hih
		}
		return low;
	}

template <class I, typename T, class P>
I g_upper_bound(I low, I hih, const T& val, P& cmp)
// pre:    I is a random access iterator (operator [] and "pointer" arithmetic)
//         I has ValueType T
//         low + n = hih for some n >= 0
//         low[0] ... low[n-1] are in non-decreasing order using cmp
// post:   no state is changed
// return: itr =  low + i, where low[i-1] <= val < low[i]; or
//         itr = hih if no such i exists
{
	I mid;
	while (low != hih)
	{
		mid = calc_middle(low, hih);       // calculates the middle iterator of the range
		if (cmp(val, *mid))                 // val < low[mid]
			hih = mid;                          // val < low[hih]
		else                                // low[mid] <= val
			low = ++mid;                        // low[low - 1] <= val
	}
	return hih;
} // end of I g_upper_bound(I low, I hih, const T& val, P& cmp)
} // end of namespace seq



/*
class gssearch{

public:
	int g_lower_bound(beg, end, t, p);   // returns the lower bound of t in the range [beg,end) (using the predicate p to determine order)
	int g_upper_bound(beg, end, t, p);   // returns the upper bound of t in the range [beg,end) (using the predicate p to determine order)


}; // end of class gssearch



int gssearch::g_lower_bound(beg, end, t, p){




} // end of int gssearch::g_lower_bound(beg, end, t, p)


int gssearch::g_upper_bound(beg, end, t, p){



} // end of int gssearch::g_lower_bound(beg, end, t, p)

*/

#endif
